# -*- org -*-
#+AUTHOR:     lhl
#+TITLE:      Title: Gerrit使用说明
#+EMAIL: luhailong@inspur.com
#+KEYWORDS: odl, rpc
#+OPTIONS: H:4 toc:t num:t

* Gerrit
gerrit是谷歌开发用于安卓系统的代码审查的系统，目前已经开源。gerrti使用简单并友好。这里记录了gerrti的用法以及其中可能存在的陷阱和问题。


使用过git的同学，都知道，当我们git add --> git commit --> git push 之后，你的代码会被直接提交到repo，也就是代码仓库中，
就是图中橘红色箭头指示的那样。

[[./jpg/gerrit.png]]

那么gerrit就是上图中的那只鸟，普通成员的代码是被先push到gerrit服务器上，然后由代码审核人员，就是左上角的integrator在web
页面进行代码的审核(review)，可以单人审核，也可以邀请其他成员一同审核，当代码审核通过(approve)之后，这次代码才会被提交
(submit)到代码仓库(repo)中去。

无论有新的代码提交待审核，代码审核通过或被拒绝，代码提交者(Contributor)和所有的相关代码审核人员(Integrator)都会收到邮件提醒。
gerrit还有自动测试的功能，和主线有冲突或者测试不通过的代码，是会被直接拒绝掉的，这个功能似乎就是右下角那个老头(Jenkins)
的任务（目前我们没有集成Jenkins）。
整个流程就是这样。 在使用过程中，有两点需要特别注意下：
- 当进行commit时，必须要生成一个Change-Id，否则，push到gerrit服务器时，会收到一个错误提醒。
- 提交者不能直接把代码推到远程的master主线(或者其他远程分支)上去。这样就相当于越过了gerrit了。 gerrit必须依赖于一个refs/for/*的分支。



* 登录gerrit界面,并上传自己的ssh公钥
** 登录地址端口
#+BEGIN_SRC bash
http://172.23.27.11:8080
#+END_SRC

登录名称和密码已经发给大家，登录上的界面如下：

[[./jpg/login.png]]


** 找到自己的公钥
类似以下地址，如果没有公钥，需要自己生成一个，推荐用git工具附带的git bash下通过命令生成。

C:\Users\luhailong\.ssh\id_rsa.pub

** copy公钥到gerrit中gerrit设置公钥的界面
[[./jpg/pub1.png]]

[[./jpg/pub2.png]]

[[./jpg/pub3.png]]


* 下载项目
已经创建了hni和一个用来测试的test项目。在本地找一个放置代码的位置，在这个路径下载代码。下载的时候，必须用带hooks的命令，
否则需要后面自己手动copy过来。


[[./jpg/gitclone.png]]

#+BEGIN_SRC java
git clone ssh://luhailong@172.23.27.11:29418/hni && scp -p -P 29418 luhailong@172.23.27.11:hooks/commit-msg hni/.git/hooks/
#+END_SRC

* 使用git管理代码
代码修改后，使用git来提交修改。具体的git命令可以参考help。

** 修改后，查看代码状态
#+BEGIN_SRC bash
$ git status
On branch master
Your branch is ahead of 'origin/master' by 3 commits.
  (use "git push" to publish your local commits)

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        addfile.txt

nothing added to commit but untracked files present (use "git add" to track)
#+END_SRC
** 添加到repo

#+BEGIN_SRC bash
$ git add addfile.txt

#+END_SRC


** 修改后，提交修改
#+BEGIN_SRC bash
$ git commit -m " add a new test file"
[master b965caa]  add a new test file
 1 file changed, 10 insertions(+)
 create mode 100644 addfile.txt
#+END_SRC

如果出现以下提示，可以不管，是因为服务器上皮遏制的用户名跟我们本地的用户名不同。
#+BEGIN_SRC bash
$ git commit -a -s -m "readme.txt hacked."
[master 903ec50] readme.txt hacked.
 Committer: Hyman Lu(路海龙) <luhailong@inspur.com>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly. Run the
following command and follow the instructions in your editor to edit
your configuration file:

    git config --global --edit

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 1 file changed, 1 insertion(+), 1 deletion(-)

#+END_SRC

提交代码时候，gerrit不允许直接push上去，需要push到refs/for/master，经过评审后才能合入代码。

** 直接push会提示没有权限
以下是错误的方式
#+BEGIN_SRC bash
$ git push
Counting objects: 3, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 367 bytes | 367.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1)
remote: Branch refs/heads/master:
remote: You are not allowed to perform this operation.
remote: To push into this reference you need 'Push' rights.
remote: User: luhailong
remote: Please read the documentation and contact an administrator
remote: if you feel the configuration is incorrect
remote: Processing changes: refs: 1, done
To ssh://172.23.27.11:29418/test1
 ! [remote rejected] master -> master (prohibited by Gerrit: ref update access denied)
error: failed to push some refs to 'ssh://luhailong@172.23.27.11:29418/test1'
#+END_SRC

** 提交评审

正确的做法是向特殊的引用推送，这样Gerrit会自动将新提交转换为评审任务。

#+BEGIN_SRC bash
$  git push origin HEAD:refs/for/master
Counting objects: 3, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 351 bytes | 351.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1)
remote: Processing changes: new: 1, done
remote:
remote: New Changes:
remote:   http://172.23.27.11:8080/#/c/test1/+/3 change for the second time
remote:
To ssh://172.23.27.11:29418/test1
 * [new branch]      HEAD -> refs/for/master

#+END_SRC

可以看到，向refs/for/master推送成功，之后就可以到gerrit页面查看自己提交的patch了。

[[./jpg/addreview.png]]


** 自己提交的patch

* review
** 管理自己提交的patch
[[./jpg/patchowner.png]]

用户可以在最左上角那里选择需要评审的人员，可以点击右下角的修改文件，查看diff比较。如果发现这个patch有问题，还可以直接
abandon掉。

** 其他用户review patch


用户可以点击右上角的reply按键来给出自己的意见，普通用户可以+1或者-1，如果是-1，最好给出理由。

可以点开用户修改的文件，针对用户的修改，提出自己的问题。

[[./jpg/userblame.png]]


可以在-1的时候给出自己的意见：
[[./jpg/userblame2.png]]


管理员用户有更高的权限，可以+2或者-2.
[[./jpg/review2.png]]


* Gerrit页面修改错误，修改patch
** 查看错误
patch的修改者，可以在注释处给出自己的答复，也可以在线修改后提交。也可以本地修改后提交。

[[./jpg/reviewreply.png]]


也可以在线修改

[[./jpg/fixinline.png]]


在线修改完了，要publish

[[./jpg/publish.png]]


** 本地修改，重新提交
根据评审者和检验者的提示，开发者对代码进行重新修改。
重新修改后，需要使用--amend参数进行提交，即使用前次提交的日志重新提交，这一点非常重要。因为这样就会对原提交说明中的“Change-Id:”标签予以原样保留，当再将新提交推送到服务器时，Gerrit不会为新提交生成新的评审任务编号而是会重用原有的任务编号，将新提交转化为老的评审任务的新的补丁集。
在执行git commit --amend时，可以修改提交说明，但是注意不要删除Change-Id标签，更不能修改它。

#+BEGIN_SRC java
$ git add -u

$ git commit --amend
[master 29f85fb] alfjalkjfalfjl
 Date: Thu May 3 16:12:26 2018 +0800
 Committer: Hyman Lu(路海龙) <luhailong@inspur.com>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly. Run the
following command and follow the instructions in your editor to edit
your configuration file:

    git config --global --edit

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 1 file changed, 1 insertion(+), 1 deletion(-)

#+END_SRC


如果发现修改没有必要，可以abandon掉这个patch。

** 审阅者可以根据重新提交的修改和解释，继续-1，或者删除-1

[[./jpg/delblame.png]]


** 管理者合入

有管理权限的人，可以submit合入

[[./jpg/submit.png]]

